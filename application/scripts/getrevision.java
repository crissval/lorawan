// Must be compile to java 1.8 at most: javac --release 8 getrevision.java

import java.lang.ProcessBuilder;
import java.lang.StringBuilder;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

class GetRevision
{
    
    static final String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
    
    
    public static void main(String args[])
    {
        int    retval      = 0;
        String revisionStr = "00000000";
        
        // Build the file name and delete it if it already exists
        String filename = null;
        if(args.length > 0)
        {
            filename = args[0];
            File f   = new File(filename);
            if(f.exists()) { f.delete(); }
        }
        
        // Run the command to get the revision identifier
        ProcessBuilder pb = new ProcessBuilder("git", "rev-parse", "HEAD");
        try
        {
            Process proc = pb.start();
            BufferedReader stdOut = new BufferedReader(new InputStreamReader(proc.getInputStream()));
            revisionStr  = stdOut.readLine().substring(0, 8);
        }
        catch(IOException e)
        {
            System.err.println("Failed to get revision!");
            retval = 2;
        }
        
        // Get the time string
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        String           ts  = sdf.format(new Date());
        
        // Build the string
        StringBuilder str = new StringBuilder(1000);
        str.append("/*\n * This file has been generated by a script at: ");
        str.append(ts);
        str.append(" UTC.\n");
        str.append(" * Do not change it or your changes will be lost.\n */\n\n\n");
        str.append("#ifndef VERSION_REV_H_\n");
        str.append("#define VERSION_REV_H_\n\n");
        str.append("#define VERSION_REV_ID_STR      \"");
        str.append(revisionStr);
        str.append("\"\n");
	str.append("#define VERSION_REV_ID_UNIT32  0x");
	str.append(revisionStr);
        str.append("\n\n#endif /* VERSION_REV_H_ */\n");
        
       
        if(filename != null)
        {
            // Write the output file
            BufferedWriter file = null;
            try
            {
                file = new BufferedWriter(new FileWriter(filename));
                file.write(str.toString());
            }
            catch(IOException e)
            {
                System.err.println("Failed to write revision to file: " + filename);
                retval = 3;
            }
            finally { try { file.close(); } catch(IOException e) { /* Do nothing */ } }
        }
        else { System.out.println(str); }
       
        System.exit(retval);
    }
}
